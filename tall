[33mcommit aaafbbf9eeff4d7b95b42f434187f716a093007c[m
Author: Ryuto Kawamata <kawamata@pxcell.co.jp>
Date:   Mon Mar 31 23:24:24 2025 +0900

    Initial commit

[1mdiff --git a/app/api/checkout/route.ts b/app/api/checkout/route.ts[m
[1mnew file mode 100644[m
[1mindex 0000000..e3140a4[m
[1m--- /dev/null[m
[1m+++ b/app/api/checkout/route.ts[m
[36m@@ -0,0 +1,154 @@[m
[32m+[m[32mimport { NextRequest, NextResponse } from 'next/server';[m
[32m+[m[32mimport Stripe from 'stripe';[m
[32m+[m
[32m+[m[32mconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {[m
[32m+[m[32m  apiVersion: '2023-10-16', // Use the latest API version[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32mexport async function POST(req: NextRequest) {[m
[32m+[m[32m  try {[m
[32m+[m[32m    // Expect either a single priceId/quantity OR an array of line_items[m
[32m+[m[32m    const body = await req.json();[m
[32m+[m[32m    const { line_items } = body;[m
[32m+[m[32m    let lineItems: Stripe.Checkout.SessionCreateParams.LineItem[] = [];[m
[32m+[m
[32m+[m[32m    // Check if the request body contains an array of line items (from cart)[m
[32m+[m[32m    if (Array.isArray(line_items)) {[m
[32m+[m[32m      lineItems = line_items.map((item: { price: string; quantity: number }) => {[m
[32m+[m[32m        if (!item.price || !item.quantity || item.quantity < 1) {[m
[32m+[m[32m          throw new Error('Invalid line item data in request.');[m
[32m+[m[32m        }[m
[32m+[m[32m        return {[m
[32m+[m[32m          price: item.price,[m
[32m+[m[32m          quantity: item.quantity,[m
[32m+[m[32m        };[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m[41m [m
[32m+[m[32m    // Check if the request body contains single item details (legacy, can be removed later)[m
[32m+[m[32m    else if (body.priceId && body.quantity) {[m
[32m+[m[32m      console.warn("Received single item checkout request (legacy)"); // Add warning[m
[32m+[m[32m      lineItems = [[m
[32m+[m[32m        {[m
[32m+[m[32m          price: body.priceId,[m
[32m+[m[32m          quantity: body.quantity,[m
[32m+[m[32m        },[m
[32m+[m[32m      ];[m
[32m+[m[32m    }[m[41m [m
[32m+[m[32m    // Invalid request body[m
[32m+[m[32m    else {[m
[32m+[m[32m        throw new Error('Invalid request body. Expected line_items array or priceId/quantity.')[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    if (lineItems.length === 0) {[m
[32m+[m[32m      return NextResponse.json({ error: 'No items to checkout' }, { status: 400 });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    const session = await stripe.checkout.sessions.create({[m
[32m+[m[32m      payment_method_types: [[m
[32m+[m[32m        'card',[m
[32m+[m[32m        // 'konbini',     // コンビニ払い[m
[32m+[m[32m        // 'customer_balance',  // 銀行振込[m
[32m+[m[32m      ],[m
[32m+[m[32m      line_items: lineItems, // Use the prepared lineItems array[m
[32m+[m[32m      mode: 'payment',[m
[32m+[m[32m      success_url: `${req.headers.get('origin')}/checkout-success?session_id={CHECKOUT_SESSION_ID}`,[m
[32m+[m[32m      cancel_url: `${req.headers.get('origin')}/?canceled=true`,[m
[32m+[m[32m      shipping_address_collection: {[m
[32m+[m[32m        allowed_countries: ['JP'],[m
[32m+[m[32m      },[m
[32m+[m[32m      shipping_options: [[m
[32m+[m[32m        {[m
[32m+[m[32m          shipping_rate_data: {[m
[32m+[m[32m            type: "fixed_amount",[m
[32m+[m[32m            fixed_amount: {[m
[32m+[m[32m              amount: 0,[m
[32m+[m[32m              currency: "jpy",[m
[32m+[m[32m            },[m
[32m+[m[32m            display_name: "ゆうパケット",[m
[32m+[m[32m            delivery_estimate: {[m
[32m+[m[32m              minimum: {[m
[32m+[m[32m                unit: "business_day",[m
[32m+[m[32m                value: 2,[m
[32m+[m[32m              },[m
[32m+[m[32m              maximum: {[m
[32m+[m[32m                unit: "business_day",[m
[32m+[m[32m                value: 4,[m
[32m+[m[32m              },[m
[32m+[m[32m            },[m
[32m+[m[32m          },[m
[32m+[m[32m        },[m
[32m+[m[32m        {[m
[32m+[m[32m          shipping_rate_data: {[m
[32m+[m[32m            type: "fixed_amount",[m
[32m+[m[32m            fixed_amount: {[m
[32m+[m[32m              amount: 550,[m
[32m+[m[32m              currency: "jpy",[m
[32m+[m[32m            },[m
[32m+[m[32m            display_name: "宅急便コンパクト",[m
[32m+[m[32m            delivery_estimate: {[m
[32m+[m[32m              minimum: {[m
[32m+[m[32m                unit: "business_day",[m
[32m+[m[32m                value: 1,[m
[32m+[m[32m              },[m
[32m+[m[32m              maximum: {[m
[32m+[m[32m                unit: "business_day",[m
[32m+[m[32m                value: 2,[m
[32m+[m[32m              },[m
[32m+[m[32m            },[m
[32m+[m[32m          },[m
[32m+[m[32m        },[m
[32m+[m[32m      ],[m
[32m+[m[32m      phone_number_collection: {[m
[32m+[m[32m        enabled: true, // 電話番号の収集を有効化[m
[32m+[m[32m      },[m
[32m+[m[32m      locale: "ja", // 日本語表示[m
[32m+[m[32m      allow_promotion_codes: true, // プロモーションコードを許可[m
[32m+[m[32m      automatic_tax: {[m
[32m+[m[32m        enabled: true, // 自動税計算を有効化[m
[32m+[m[32m      },[m
[32m+[m[32m      metadata: {[m
[32m+[m[32m        source: "omf_website", // 注文ソースの識別用[m
[32m+[m[32m      },[m
[32m+[m[32m      /* 一時的に無効化[m
[32m+[m[32m      payment_method_options: {[m
[32m+[m[32m        konbini: {[m
[32m+[m[32m          expires_after_days: 3, // 支払い期限を3日に設定[m
[32m+[m[32m          product_description: 'OMFフレグランスオーダー', // 商品説明（レシート等に表示）[m
[32m+[m[32m        },[m
[32m+[m[32m        customer_balance: {[m
[32m+[m[32m          funding_type: 'bank_transfer',[m
[32m+[m[32m          bank_transfer: {[m
[32m+[m[32m            type: 'jp_bank_transfer',[m
[32m+[m[32m          },[m
[32m+[m[32m        },[m
[32m+[m[32m      },[m
[32m+[m[32m      */[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    return NextResponse.json({ sessionId: session.id });[m
[32m+[m[32m  } catch (error) {[m
[32m+[m[32m    console.error('Error creating Stripe checkout session:', error);[m
[32m+[m[41m    [m
[32m+[m[32m    // 詳細なエラーログを追加[m
[32m+[m[32m    if (error instanceof Error) {[m
[32m+[m[32m      console.error('Error message:', error.message);[m
[32m+[m[32m      console.error('Error stack:', error.stack);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    if (error instanceof Stripe.errors.StripeError) {[m
[32m+[m[32m      console.error('Stripe error type:', error.type);[m
[32m+[m[32m      console.error('Stripe error code:', error.code);[m
[32m+[m[32m      console.error('Stripe error param:', error.param);[m
[32m+[m[41m      [m
[32m+[m[32m      return NextResponse.json({[m[41m [m
[32m+[m[32m        error: `Stripe Error: ${error.message}`,[m
[32m+[m[32m        type: error.type,[m
[32m+[m[32m        code: error.code,[m
[32m+[m[32m        param: error.param[m
[32m+[m[32m      }, { status: 500 });[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    const errorMessage = error instanceof Error ? error.message : 'Internal server error';[m
[32m+[m[32m    return NextResponse.json({ error: errorMessage, details: String(error) }, { status: 500 });[m
[32m+[m[32m  }[m
[32m+[m[32m}[m[41m [m
\ No newline at end of file[m
